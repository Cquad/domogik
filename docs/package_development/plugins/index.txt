===================
Plugins development
===================

.. note::
    If you think something is not clear or is missing in this documentation, please send an email to our developpers mailing list : *domogik-developers@lists.labs.libre-entreprise.org* and explain us clearly what is not clear or what could be added.

General informations
====================

* :doc:`What is new in 0.4 about Domogik plugins format ? <what_is_new_in_0.4>`
* :doc:`Changelog of plugins format since Domogik 0.4 <changelog>`
* :doc:`Release numbers rules <releases/release_numbers_rules>`

First, create a repository and write some specifications
========================================================

* :doc:`Create the plugin repository on GitHub <create_repository/index>`
* :doc:`Write specifications <specifications/index>`

Branches management
===================

* :doc:`What is a branch in git ? <git/what_is_a_branch>`
* :doc:`The branches management is detailed in the workflow of a plugin development <workflow>`

Plugin name
===========

Choose a name that describes the plugin as good as possible. Notice that a plugin can not use more than 8 characters and they should be all lower case. 
This restriction is linked to xPL and is not a Domogik limitation.

Prepare the plugin
==================

:doc:`See workflow, step 1 <workflow>`

Now, you will have to create a few files for your plugin on the *master* branch.

* :doc:`Plugin file tree <plugin_file_tree/index>`
* :doc:`Readme and changelog files <readme_and_changelog/index>`
* :doc:`.gitignore file <git/gitignore>`

Before coding : branching to 'develop'
======================================

:doc:`See workflow, step 2 <workflow>`

* :doc:`Switch to the *develop* branch before starting your developments : follow the step 2 of the workflow <workflow>`
* :doc:`If you want, you can create in one shot the main folders and files <plugin_file_tree/create_sample>`

Json file
=========

:doc:`See workflow, step 3 <workflow>`

The **info.json** file it surely the most important part of a plugin. It will describe the configuration of the plugins, the features, the xPL messages to send and to listen, ...
You should first read all this chapter, then make sure that you already defined the following part in your specifications :

* configuration parameters
* devices features, splitted in sensors and commands
* xPL messages used by these features
* the data to store in database 

Starting to create the json file without being clear on these elements is useless!

.. note::
    To help you to understand the way to create a json file, you can look on already existing plugins to see real examples.

* :doc:`Json file overview <json/index>`
* :doc:`Sample json file <json/sample>`
* :doc:`Convert the json file from Domogik 0.2/0.3 format to the new Domogik 0.4 format <json/json_file_upgrade>`
* :doc:`Identity part <json/identity>`
* :doc:`Configuration part <json/configuration>`
* :doc:`Device types part <json/device_types>`
* :doc:`Sensors part <json/sensors>` 
* :doc:`Xpl stats part <json/xpl_stats>`
* :doc:`Commands part <json/commands>` 
* :doc:`Xpl commands part <json/xpl_commands>`

* Resources : 

  * :doc:`Data types <../../technical/data_types/index>`
  * :doc:`Field types <field_types/index>`
  * :doc:`Conversion files <conversion/index>`

Python part
===========

:doc:`See workflow, step 3 <workflow>`

After creating a start script (used only by the developpers), you will now create the python part of your plugin. 

* :doc:`start.sh file <start_file/index>`
* Python part
  
  * :doc:`__init__.py files <python/init_files>`
  * :doc:`Bin part <python/bin_part>`
  * :doc:`Library part <python/lib_part>`
  * How to ...

    * :doc:`Make the detected devices available in the user interface <python/detected_devices>`
    * ...

Dedicated administration page
=============================

:doc:`See workflow, step 3 <workflow>`

Some plugin may need some advanced configuration capabilities or some helpers feature that can be used from the administration interface. This is not mandatory.

* :doc:`Add dedicated administration pages <admin/index>` 

Icon
====

:doc:`See workflow, step 3 <workflow>`

Your plugin should have an icon.

* :doc:`Add an icon <graphical/icon_file>`

Udev rules
==========

:doc:`See workflow, step 3 <workflow>`

If needed, you can add some sample udev rules files for your plugin.

* :doc:`Add some udev rules files <udev_rules/index>`

Documentation
=============

:doc:`See workflow, step 3 <workflow>`

The documentation is a part important of a plugin! If it is not enough clear, the user may have some difficulties to use the plugin.

  * :doc:`Overview of the documentation process <doc/index>`
  * :doc:`Doc tree <doc/tree>`
  * :doc:`How to write the documentation in *ReST* format (which is used by *sphinx*) <doc/sphinx>`
  * :doc:`What should contain the documentation ? <doc/content>`
  * :doc:`The developpers part <doc/dev>`
  * :doc:`Make your documentation published on ReadTheDocs.org <doc/readthedoc>`

Tests
=====

:doc:`See workflow, step 3 <workflow>`

Preparing some automated tests is something really important for a plugin. It will help you to test automatically the plugin after each commit and will help you to easily validate some contributions (pull requests).

* :doc:`Tests <tests/index>`

  * :doc:`The testrunner tool <tests/testrunner>`
  * :doc:`Travis CI (continuous integration) <tests/travis_templates>`

Your plugin is ready ? Make some users test it
==============================================

:doc:`See workflow, step 4 <workflow>`

Now, your plugin may be functionnal, documented and the tests are automated. It is time to release a version! But before, you should make some people test your plugin!

* :doc:`Release your plugin by following the step 4 of the workflow <workflow>`




Release a version of your plugin
================================

:doc:`See workflow, step 5 <workflow>`

* :doc:`Release your plugin by following the step 5 of the workflow <workflow>`

..todo ::
    * switch to develop
    * create a branch per version for readthedoc ????
    * update info.json version number
    * update docs/conf.py version number
    * do the dev/doc/tests
    * switch to master when version is ready (see previous chapter)





Some other points
=================

  * Helpers

    * ...

* Data files

